void merge(int *arr, size_t s, size_t t, size_t e)
{
	size_t len1 = t - s + 1;
	size_t len2 = e - t;
	if (len1 > 0 && len2 > 0)
	{
		int *arr1 = new int[len1];
		int *arr2 = new int[len2];
		for (size_t i = 0; i < len1; ++i)
			arr1[i] = arr[s + i];
		for (size_t i = 0; i < len2; ++i)
			arr2[i] = arr[i + t + 1];
		size_t k = s, i, j;
		for (i = 0, j = 0; i < len1 && j < len2;)
			if (arr1[i] > arr2[j])
				arr[k++] = arr2[j++];
			else
				arr[k++] = arr1[i++];
		if (i < len1)
			while (i < len1) arr[k++] = arr1[i++];
		if (j < len2)
			while (j < len2) arr[k++] = arr2[j++];
		delete[] arr1;
		delete[] arr2;
	}
}

void MergeSort(int *arr, size_t s, size_t e)
{
	if (s < e)
	{
		size_t t = (e + s) >> 1;
		MergeSort(arr, s, t);
		MergeSort(arr, t + 1, e);
		merge(arr, s, t, e);
	}
}
